// models/message.dart
import 'package:cloud_firestore/cloud_firestore.dart'; // Import if using Firebase Timestamp

// Enum to define different types of messages
enum MessageType {
  text,
  image,
  video, // Example: if you support video messages
  audio, // Example: if you support audio messages
  file,  // Example: for generic file sharing
  system, // For system-generated messages (e.g., "User X joined the chat")
}

class Message {
  final String id; // Unique ID for the message (often generated by the backend)
  final String chatRoomId; // ID of the chat room this message belongs to
  final String senderId;   // ID of the user who sent the message
  final String receiverId; // ID of the user who should receive the message
  final String? text;       // Text content of the message (nullable if it's an image/file)
  final String? imageUrl;   // URL of the image (if messageType is image)
  final String? videoUrl;   // URL of the video (if messageType is video)
  final String? audioUrl;   // URL of the audio (if messageType is audio)
  final String? fileUrl;    // URL of the file (if messageType is file)
  final String? fileName;   // Name of the file (if messageType is file)
  final int? fileSize;     // Size of the file in bytes (if messageType is file)
  final DateTime timestamp;  // When the message was sent
  final MessageType type;    // Type of the message (text, image, etc.)
  final bool isRead;       // Whether the message has been read by the receiver
  final bool isEdited;     // Whether the message has been edited
  final Map<String, dynamic>? metadata; // For any additional custom data

  Message({
    required this.id,
    required this.chatRoomId,
    required this.senderId,
    required this.receiverId,
    this.text,
    this.imageUrl,
    this.videoUrl,
    this.audioUrl,
    this.fileUrl,
    this.fileName,
    this.fileSize,
    required this.timestamp,
    this.type = MessageType.text, // Default to text
    this.isRead = false,
    this.isEdited = false,
    this.metadata,
  });

  // Factory constructor to create a Message from a JSON object (e.g., from API or Firestore)
  factory Message.fromJson(Map<String, dynamic> json, String documentId) {
    return Message(
      id: documentId, // Use document ID from Firestore or provided ID
      chatRoomId: json['chatRoomId'] as String? ?? '',
      senderId: json['senderId'] as String? ?? '',
      receiverId: json['receiverId'] as String? ?? '',
      text: json['text'] as String?,
      imageUrl: json['imageUrl'] as String?,
      videoUrl: json['videoUrl'] as String?,
      audioUrl: json['audioUrl'] as String?,
      fileUrl: json['fileUrl'] as String?,
      fileName: json['fileName'] as String?,
      fileSize: json['fileSize'] as int?,
      // Handle Firebase Timestamp or standard DateTime string
      timestamp: json['timestamp'] is Timestamp
          ? (json['timestamp'] as Timestamp).toDate()
          : (json['timestamp'] is String
          ? DateTime.tryParse(json['timestamp'] as String) ?? DateTime.now()
          : DateTime.now()),
      type: _messageTypeFromString(json['type'] as String? ?? 'text'),
      isRead: json['isRead'] as bool? ?? false,
      isEdited: json['isEdited'] as bool? ?? false,
      metadata: json['metadata'] as Map<String, dynamic>?,
    );
  }

  // Method to convert a Message instance to a JSON object
  Map<String, dynamic> toJson() {
    return {
      // 'id': id, // Usually, ID is not part of the document data itself in Firestore
      'chatRoomId': chatRoomId,
      'senderId': senderId,
      'receiverId': receiverId,
      if (text != null) 'text': text,
      if (imageUrl != null) 'imageUrl': imageUrl,
      if (videoUrl != null) 'videoUrl': videoUrl,
      if (audioUrl != null) 'audioUrl': audioUrl,
      if (fileUrl != null) 'fileUrl': fileUrl,
      if (fileName != null) 'fileName': fileName,
      if (fileSize != null) 'fileSize': fileSize,
      'timestamp': timestamp.toIso8601String(), // Or FieldValue.serverTimestamp() for Firestore
      'type': type.toString().split('.').last, // Converts enum to string e.g., "text"
      'isRead': isRead,
      'isEdited': isEdited,
      if (metadata != null) 'metadata': metadata,
    };
  }

  // Helper method to convert string to MessageType enum
  static MessageType _messageTypeFromString(String typeString) {
    switch (typeString.toLowerCase()) {
      case 'text':
        return MessageType.text;
      case 'image':
        return MessageType.image;
      case 'video':
        return MessageType.video;
      case 'audio':
        return MessageType.audio;
      case 'file':
        return MessageType.file;
      case 'system':
        return MessageType.system;
      default:
        return MessageType.text; // Default or handle unknown type
    }
  }

  // Optional: A copyWith method can be useful for updating instances
  Message copyWith({
    String? id,
    String? chatRoomId,
    String? senderId,
    String? receiverId,
    String? text,
    String? imageUrl,
    String? videoUrl,
    String? audioUrl,
    String? fileUrl,
    String? fileName,
    int? fileSize,
    DateTime? timestamp,
    MessageType? type,
    bool? isRead,
    bool? isEdited,
    Map<String, dynamic>? metadata,
  }) {
    return Message(
      id: id ?? this.id,
      chatRoomId: chatRoomId ?? this.chatRoomId,
      senderId: senderId ?? this.senderId,
      receiverId: receiverId ?? this.receiverId,
      text: text ?? this.text,
      imageUrl: imageUrl ?? this.imageUrl,
      videoUrl: videoUrl ?? this.videoUrl,
      audioUrl: audioUrl ?? this.audioUrl,
      fileUrl: fileUrl ?? this.fileUrl,
      fileName: fileName ?? this.fileName,
      fileSize: fileSize ?? this.fileSize,
      timestamp: timestamp ?? this.timestamp,
      type: type ?? this.type,
      isRead: isRead ?? this.isRead,
      isEdited: isEdited ?? this.isEdited,
      metadata: metadata ?? this.metadata,
    );
  }
}