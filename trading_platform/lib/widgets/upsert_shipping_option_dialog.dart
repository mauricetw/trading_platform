import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // For TextInputFormatter
import '../models/user/shipping_option.dart';
import '../services/shipping_api_service.dart';

class UpsertShippingOptionDialog extends StatefulWidget {
  final ShippingApiService apiService;
  final ShippingOption? shippingOption; // null if adding new, existing if editing
  final String userId;

  const UpsertShippingOptionDialog({
    super.key,
    required this.apiService,
    this.shippingOption,
    required this.userId,
  });

  @override
  State<UpsertShippingOptionDialog> createState() => _UpsertShippingOptionDialogState();
}

class _UpsertShippingOptionDialogState extends State<UpsertShippingOptionDialog> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _costController;
  late TextEditingController _descriptionController;
  late bool _isEnabled;

  bool _isSubmitting = false;
  String _dialogTitle = '新增運送方式';

  @override
  void initState() {
    super.initState();
    final option = widget.shippingOption;

    _nameController = TextEditingController(text: option?.name ?? '');
    _costController = TextEditingController(
      // 如果 cost 是 0.0，顯示為 "0" 或空，取決於你的偏好
      text: option != null ? option.cost.toStringAsFixed(option.cost.truncateToDouble() == option.cost ? 0 : 2) : '',
    );
    _descriptionController = TextEditingController(text: option?.description ?? '');
    _isEnabled = option?.isEnabled ?? true; // Default to true for new options

    if (option != null) {
      _dialogTitle = '編輯運送方式';
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _costController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) {
      return; // Validation failed
    }
    _formKey.currentState!.save(); // Triggers onSaved for TextFormFields if any

    setState(() => _isSubmitting = true);

    try {
      final String name = _nameController.text.trim();
      final String costString = _costController.text.trim();
      final String description = _descriptionController.text.trim();

      // Validate and parse cost
      final double? cost = double.tryParse(costString);
      if (cost == null || cost < 0) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('錯誤：運費格式不正確或無效')),
          );
        }
        setState(() => _isSubmitting = false);
        return;
      }

      ShippingOption optionToSave;
      final now = DateTime.now();

      if (widget.shippingOption == null) { // Create new
        optionToSave = ShippingOption(
          id: '', // ID is usually generated by the backend, send empty or handle in service/backend
          name: name,
          cost: cost,
          description: description,
          isEnabled: _isEnabled,
          createdAt: now, // Or let backend set this
          // sellerId: widget.userId, // If your API and model expect this
        );
        final newOption = await widget.apiService.addShippingOption(optionToSave); // Pass userId if needed by API
        if (mounted) {
          Navigator.of(context).pop(newOption); // Return the created option
        }
      } else { // Update existing
        optionToSave = ShippingOption(
          id: widget.shippingOption!.id,
          name: name,
          cost: cost,
          description: description,
          isEnabled: _isEnabled,
          createdAt: widget.shippingOption!.createdAt, // Preserve original creation date
          updatedAt: now, // Set or let backend set this
          // sellerId: widget.userId, // If your API and model expect this
        );
        final updatedOption = await widget.apiService.updateShippingOption(optionToSave);
        if (mounted) {
          Navigator.of(context).pop(updatedOption); // Return the updated option
        }
      }
    } catch (e) {
      if (mounted) {
        print("Error submitting shipping option: $e");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${widget.shippingOption == null ? "新增" : "更新"}失敗: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isSubmitting = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    return AlertDialog(
      title: Text(_dialogTitle),
      content: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: '運送方式名稱 *',
                  hintText: '例如：7-11 超商取貨',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return '請輸入運送方式名稱';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _costController,
                decoration: const InputDecoration(
                  labelText: '運費 *',
                  hintText: '例如：60',
                  prefixText: '\$',
                  border: OutlineInputBorder(),
                ),
                keyboardType: const TextInputType.numberWithOptions(decimal: true),
                inputFormatters: [
                  FilteringTextInputFormatter.allow(RegExp(r'^\d+\.?\d{0,2}')), // Allows numbers and up to 2 decimal places
                ],
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return '請輸入運費';
                  }
                  final cost = double.tryParse(value.trim());
                  if (cost == null || cost < 0) {
                    return '請輸入有效的運費金額';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: '描述 (選填)',
                  hintText: '例如：支援本島所有7-11門市',
                  border: OutlineInputBorder(),
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('啟用此運送方式', style: Theme.of(context).textTheme.titleMedium),
                  Switch(
                    value: _isEnabled,
                    onChanged: (bool value) {
                      setState(() {
                        _isEnabled = value;
                      });
                    },
                    activeColor: colorScheme.primary,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
      actions: <Widget>[
        if (_isSubmitting)
          const Padding(
            padding: EdgeInsets.only(right: 16.0),
            child: CircularProgressIndicator(strokeWidth: 3),
          )
        else ...[
          TextButton(
            child: const Text('取消'),
            onPressed: () => Navigator.of(context).pop(), // Pop without a result
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(backgroundColor: colorScheme.primary, foregroundColor: colorScheme.onPrimary),
            onPressed: _submitForm,
            child: const Text('儲存'),
          ),
        ],
      ],
    );
  }
}
